<?php

/* before install module, need to create 'Allowance' field to user profile. ('field_data_field_allowance' in database)  */


/**
 *  Implements hook_user_update().
 */
function skyjack_credits_user_update(&$edit, $account, $category) {

	if(isset($edit['field_allowance']['und']['0']['value']))
	{
		$field_allowance = $edit['field_allowance']['und']['0']['value'];

		$result = db_query('INSERT INTO uc_skyjack_user_credits (uid, credits)
			VALUES (:uid, :credits) 
			ON DUPLICATE KEY
			UPDATE credits = :credits', array(':uid' => $account->uid, ':credits' => $field_allowance));
	}
}

/**
 * hook_uc_checkout_pane()
 */

function skyjack_credits_uc_checkout_pane() {
	  $panes['sj-credits'] = array
	  (
			'id' => 'sj-credits', 
			'callback' => 'sj_credits_checkout_pane_wrapping_options', // This is the title of the callback function
			'title' => t('Manager Credits'), // This will be the title of the pane as displayed on the checkout page
			'desc' => t('Use credits during checkout'), // The description of the pane. Will appear in admin pages
			'weight' => 5, // Determines the default location of the pane on the page
	  );
	  return $panes;
}


function sj_credits_checkout_pane_wrapping_options($op, &$order, $form = NULL, &$form_state = NULL) {
	
	global $user;
	$role_name = array('administrator', 'territory manager', 'vp');

	$user_data = user_load($user->uid);
	
	if(user_is_logged_in() and (in_array($role_name[0], $user->roles) || in_array($role_name[1], $user->roles) || in_array($role_name[2], $user->roles)) and isset($user_data->field_allowance['und']['0']['value']))
	{
		switch($op)
		{
			case 'view':
				
				$description = t('Please check this box if you wish your order to be gift wrapped.');
				// Here we create the form elements that will be added into the checkout pane
				// First define the form fields:
				$ajax = array(
					'callback' => 'uc_sj_credits_checkout_update',
				);
				
				$description = variable_get('uc_sj_credits_pane_description', t('Use your credits to make purchase.'));
				$contents = uc_sj_credits_form(array(), $form_state, 'checkout', $ajax);
				
				
				// Next we return the form fields according to the following pattern
				return array
					(
						'description' => $description,
						'contents' => $contents,
					);
				break;
			case 'process':
				// Here we tell Ubercart what to do with the submitted values for the form elements added when $op == 'view'

				if($form_state['clicked_button']['#value'] == 'Apply credits to order' and isset($order) and isset($form_state['values']['panes']['sj-credits']['credits']) and ctype_digit($form_state['values']['panes']['sj-credits']['credits']))
				{
					$form_value = $form_state['values']['panes']['sj-credits']['credits'];
					$credits_validate = uc_credits_apply_validate($form_value, $order);
					if($credits_validate)
					{
						//remove all sj_credits, make sure only one applied 
						uc_credits_line_item_remove($order);
						if($form_value > 0)
						{
							uc_order_line_item_add($order->order_id, 'sj_credits', 'Redeem Credits', -$form_value);
						}
						
					}
					
				}
				
				break;
			case 'review':
				$review = array();

				$result = db_query("SELECT * FROM uc_order_line_items WHERE order_id = :id AND type = :type", array(':id' => $order->order_id, ':type' => 'sj_credits'));
				if ($line_item = $result->fetchAssoc()) {
					$review[] = array('title' => $line_item['title'], 'data' => theme('uc_price', array('price' => $line_item['amount'])));
				}

				return $review;
		}
	}
}


function uc_sj_credits_form($form, $form_state, $context = 'block', $ajax = FALSE) {
	
	if (!isset($_SESSION['cart_order'])) {
		return $form;
	}
	
	global $user;
	$user_credits = get_user_current_credits($user->uid);
	
	
	$order = uc_order_load($_SESSION['cart_order']);
	$redeem_allowed = ($user_credits >= $order->order_total)?$order->order_total:$user_credits;
	$redeem_allowed = $redeem_allowed - uc_get_credits_in_line_item($order);
	
	
	$form['current_credits'] = array(
		'#type' => 'item',
		'#title' => t('Your credits balance: ').$user_credits,
		'#markup' => '',
	);
	
	$form['credits'] = array(
		'#type' => 'textfield',
		'#size' => 25,
		'#title' => t('Enter number of credits you want to redeem:'),
		'#description' => t('(Note: for Paypal\'s rule, you can only redeem either full price as same as "Order total", or less number than products price "Subtotal" when shipping is not zero.)'),
		'#default_value' => $redeem_allowed
	);
	$form['apply'] = array(
		'#type' => 'submit',
		'#value' => t('Apply credits to order'),
		'#name' => 'uc-credits-redeem-apply',
		'#submit' => array('sj_credits_checkout_pane_submit'),
		'#ajax' => array(
			'effect' => 'slide',
		),
	);

	return $form;
}

function sj_credits_checkout_pane_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['quote_requested'] = TRUE;
}

/**
 * Get user current credits
 */

function get_user_current_credits($uid) {
	
	//it's stored in field field_allowance
	/*
	$user_data = user_load($uid, TRUE);
	return $user_data->field_allowance['und']['0']['value'];
	*/
	
	return db_query('SELECT field_allowance_value AS amount
		FROM field_data_field_allowance WHERE entity_id = :uid', array(':uid' => $uid))->fetchField();
	
}

function uc_sj_credits_checkout_update($form, $form_state) {
	$commands = array();
	if (isset($form['panes']['payment']['line_items'])) {
		$commands[] = ajax_command_replace('#line-items-div', drupal_render($form['panes']['payment']['line_items']));
		$commands[] = ajax_command_prepend('#line-items-div', theme('status_messages'));
	}

	return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * validate if the credits can be applied to order
 */
function uc_credits_apply_validate($credits, &$order) {
	global $user;
	$user_avaliable_credits = get_user_current_credits($user->uid);
	if(isset($order) and $credits >= 0 and $user_avaliable_credits >= $credits)
	{
		return true;
	}
	else
	{
		return false;
	}
}

/**
 * check if credits applied to order
 */
function uc_if_credites_applied_to_order($order) {
	$applied = 'no';
	$line_item_type = 'sj_credits';
	foreach($order->line_items as $key => $line_item)
	{
		if($line_item['type'] == $line_item_type) // 'gift_wrap' is the line item ID that will be defined after this loop.
		{
			$applied = 'yes';
		}
	}
	
	return $applied;
}
/**
 * remove sj_credits from line_item
 */
function uc_credits_line_item_remove($order) {
	$line_item_type = 'sj_credits';
	foreach($order->line_items as $key => $line_item)
	{
		if($line_item['type'] == $line_item_type) // 'gift_wrap' is the line item ID that will be defined after this loop.
		{
			uc_order_delete_line_item($line_item['line_item_id']);
		}
	}
	
}

/**
 * get credits amouint already in line items
 */
function uc_get_credits_in_line_item($order) {
	$credits_in_line_item = 0;
	
	$line_item_type = 'sj_credits';
	foreach($order->line_items as $key => $line_item)
	{
		if($line_item['type'] == $line_item_type) // 'gift_wrap' is the line item ID that will be defined after this loop.
		{
			$credits_in_line_item += $line_item['amount'];
		}
	}
	return $credits_in_line_item;
}


/**
 * Implements hook_uc_line_item().
 */
function sj_credits_uc_line_item()
{
	$items[] = array
	(
		'id' => 'sj-credits', // You will use this ID in the javascript 
		'title' => t('Redeem Credits'), // This is the text that will be displayed on the line item in the subtotal
		'callback' => 'sj_credits_line_item_callback', // This is the callback function
		'weight' => 0, // This is the position of the line item in the total process
		'default' => TRUE,
		'stored' => TRUE, // This tells Ubercart to store the submitted data
		'calculated' => TRUE, // This is for line items that need to be calculated and not just displayed. For this tutorial this value is required to be true
		'add_list' => TRUE,
	);
	return $items;
}

function sj_credits_line_item_callback($op, &$arg1)
{
	/*
	if($op == 'cart-preview')
	{
		// First we need to determine the value of the discount. In this tutorial, the discount is a fixed price, but your module may require the discount value to be calculated. In my real module, the value of the discount was a percentage discount. The percentag wasset on the settings page. So I used variable_get() to get the percentage, then used the values contained in $arg1 to calculate the order total, then multiplied this by the percentage to get the amount of the discount. This tutorial is much simpler however and just uses a hard-coded value of 3 (3.00 pounds). 
		$vars = array('redeemAmount' => 3); // This is the amount of the discount
		drupal_add_js(array('giftWrap' => $vars), 'setting'); //This passes the discount to the javascript, so that it can be recovered in the javascript script
		$path = drupal_get_path('module', 'gift_wrap') . '/'; //We get the path to the javascript script
		drupal_add_js($path . 'scripts/gift_wrap.js');  // I keep my scripts in a folder inside the module called 'scripts'. In this case the path to the script is [MODULES_FOLDER]/my_module/scripts/gift_wrap.js
	}
	*/
}

/**
 * Implements hook_uc_order().
 */
function skyjack_credits_uc_order($op, &$order, $arg2)
{
	switch($op)
	{
		/*
		case 'save':
			// This is called when the user clicks 'review order' on the checkout page. We add our line item to the order in this step.
			// The first thing we do is remove the line item if it exists. Since users can go back and forth from the order review page to the checkout page, they may make different selections each time. By defaulting to having the line item removed, we prevent accidentally adding it multiple times, as well as preventing adding it if the user hasn't selected it when reviewing the page. So we loop through the existing line items searching for our specific line item, and removing it if it exists. We will add it afterwards if it needs to be added.
			foreach($order->line_items as $key => $line_item)
			{
				if($line_item['type'] == 'gift_wrap') // 'gift_wrap' is the line item ID that will be defined after this loop.
			{
				unset($order->line_items[$key]);
				db_query('DELETE FROM {uc_order_line_items} WHERE order_id = :order_id AND type = :type', array('order_id' => $order->order_id, 'type' => 'gift_wrap'));
				break;
			}
			}
			// We added the value of the checkbox to the order in our hook_checkout_pane callback function when [geshifilter-code]$op == &#039;process&#039;[/geshifilter-code]. If the checkbox was selected, the value is 1 (true). If the checkbox was not selected, the value is 0 (false). So we check the value, and if the checkbox was selected, we add the line item to the order.
			if($order->gift_wrap) 
			{
				// We will enter this conditional when the checkbox was selected. 
				// In this tutorial, the amount of the line item is a fixed amount, 3 pounds, but in my real tutorial the value was a percentage of the total, as I explained above in the hook_line_order() explanation. You will most likely need to re-calculate the value of the line item again here, however in this tutorial it is a fixed amount.
				$line_item_value = 3;
				// Next we add the line item
				uc_order_line_item_add
				(
					$order->order_id, // This is the order ID. 
					'gift_wrap', // This is the line item ID. We used this ID to remove the line item in the loop above.
					t('Gift Wrapping'), // This is the text that will be shown on the order review page to describe what the line item is
					3, // This is the value of the line item. Discounts will be a negative number, surcharges a positive number
					NULL, // This is the weight of the line item
					array() // Here you can pass any data that your module will use for itself when the order is submitted. In the case of my real module, I passed the value of the message that should be attached to the order when the user purchases gift wrapping. In this module there is no custom value so I actually wouldn't even pass the empty array normally. I just put it here to explain how it can be used.
				);
			}
		  break;
		  */
    case 'total':
		// Here we return a value that will be added to the order total. For discounts we would return a negative value, for surcharges we return a positive value. We do NOT return the new total, only the change in the total.
		// We loop through each of the line items to see if ours has been added. If it has, we adjust the order total accordingly.
		foreach($order->line_items as $line_item)
		{
			if($line_item['type'] == 'sj_credits') // 'gift_wrap' is the ID of the line item as defined when $op equals 'save'
			{
				// If we enter this, the line item exists, so we need to return the value of the line item. This will adjust the order total.
				return $line_item['amount'];
			}
		}
		break;
    case 'submit':
		// Here we perform any actions that our module requires for the module itself - i.e. database updates. In this tutorial there isn't actually anything to be saved to the database, but in my real module I had to save text for a card that would be attached to the order if the user chose gift wrapping. I did all my database manipulation, saving the message to the database, in this section.
		
		$credits_precomplete_validate = credits_precomplete_validate($order);
		if(!$credits_precomplete_validate)
		{
			return array(array(
				'pass' => FALSE,
				'message' => t('Your credits is not enough to pay for the order.'),
			));
		}
		break;
	  
	}
}


function credits_precomplete_validate($order) {
	global $user;
	
	$order_total = $order->order_total;
	$redeem_credits = ABS(uc_get_credits_in_line_item($order)); //0 or > 0
	$user_crrent_credits = get_user_current_credits($user->uid);
	$product_total = 0;
	
	//get only products price, 
	foreach($order->line_items as $k => $v)
	{
		if($v['type'] == 'subtotal')
		{
			$product_total = $v['amount'];
		}
	}
	
	if($redeem_credits == 0) //no redeem at this time
	{
		return true;
	}
	else
	{
		//redeem cover all order, need user's available credits to greater than redeem credits, use internal payment
		if($order_total == 0 and $user_crrent_credits >= $redeem_credits)
		{
			return true;
		}
		//redeem not cover all order, 
		//need user's available credits to greater than redeem credits, and greater than only products value, use paypal payment 
		if($order_total > 0 and $user_crrent_credits >= $redeem_credits and $redeem_credits < $product_total)
		{
			return true;
		}
	}
	return false;
}

//update user credits after check out complete
function update_user_credits($order, $amount, $note = 'redeem') {
	global $user;
	$before_credits = get_user_current_credits($user->uid);
	$after_credits = $before_credits + $amount;

	$result = db_query('INSERT INTO uc_skyjack_order_credits (uid, oid, value, before_credits, after_credits, note, created)
			VALUES (:uid, :oid, :value, :before_credits, :after_credits, :note, NOW()) ', 
			array(':uid' => $user->uid, ':oid' => $order->order_id, ':value' => $amount, ':before_credits' => $before_credits, ':after_credits' => $after_credits, ':note' => $note));
	
	
	$account = user_load($user->uid); // Loading account
	$edit = array(
	  'field_allowance' => array(
		'und' => array(
		  0 => array(
			'value' => $after_credits,
		  ),
		),
	  ),
	);
	user_save($account, $edit);
	
	
	//db_query('UPDATE field_data_field_allowance SET field_allowance_value = :after_credits WHERE entity_id = :uid', array(':after_credits' => $after_credits, ':uid' => $user->uid));
	db_query('UPDATE uc_skyjack_user_credits SET credits = :after_credits WHERE uid = :uid', array(':after_credits' => $after_credits, ':uid' => $user->uid));
} 

/**
 * Implements hook_uc_checkout_complete().
 */
function skyjack_credits_uc_checkout_complete($order, $account) {

	$line_item_type = 'sj_credits';
	foreach($order->line_items as $key => $line_item)
	{
		if($line_item['type'] == $line_item_type) // 'gift_wrap' is the line item ID that will be defined after this loop.
		{
			update_user_credits($order, $line_item['amount'], 'redeem');
		}
	}
	
}